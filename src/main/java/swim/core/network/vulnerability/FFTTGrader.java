package swim.core.network.vulnerability;

import java.io.PrintStream;

import swim.core.network.UWSensorNetwork;
import swim.core.network.algorithm.*;
import swim.core.network.misc.ReadOnlyProperty;
import swim.core.network.misc.DoublePropertyMap;
import swim.core.network.Demand;

public class FFTTGrader extends TTGrader {
	

	public FFTTGrader(PrintStream out) {
		
		super(out);
	}

	@Override
	public String getTitle() {
		
		return "FFTT";
	}

	@Override
	double getLinkTravelTime(int linkId) {

		return network.getFreeFlowTravelTime(linkId);
	}
	
	@Override
	protected void createRouters() {
		
		rerouter = router = new ShortestPathRouter(network, disruptable,null); 
		// new ShortestPathRouter(null);
	}

	ReadOnlyProperty<Double> oldTravelTime;
	
	@Override
	protected void beginGrade() {
		super.beginGrade();
		oldTravelTime = network.getTravelTime();
		network.setTravelTime(network.getFreeFlowTravelTime());		
	}
	
	@Override
	protected void endGrade() {
		network.setTravelTime(oldTravelTime);
		super.endGrade();
	}

}
