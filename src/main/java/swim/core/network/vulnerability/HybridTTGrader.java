package swim.core.network.vulnerability;

import java.io.PrintStream;

import swim.core.network.Assignment;
import swim.core.network.Demand;
import swim.core.network.UWSensorNetwork;
import swim.core.network.UWSensorNetwork.*;
import swim.core.network.algorithm.*;
import swim.core.network.misc.DoublePropertyMap;

public class HybridTTGrader extends TTGrader{
	
	public HybridTTGrader(PrintStream out) {
		
		super(out);
		
		rerouteAll = true;
	}

	@Override
	public String getTitle() {
		
		return "Hybrid";
	}
	
	@Override 
	protected void beginGrade(){
		
		super.beginGrade();
		
		network.resetFlow();
		
	}
	
	@Override
	protected void createRouters() {

		router = new FrankWolfeRouter(1e-6, null);

		rerouter = new ShortestPathRouter(network, network.getTravelCost(),null);
	}

	@Override 
	protected Assignment reroute() {
		
		network.loadAssignment(baseAssignment);
		
		return super.reroute();
		
	}
}
